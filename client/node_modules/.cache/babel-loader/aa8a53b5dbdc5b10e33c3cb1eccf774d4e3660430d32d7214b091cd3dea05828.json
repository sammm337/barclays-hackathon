{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/samruddhishinde/Desktop/barclays/research-paper-analyzer/client/src/components/TextToSpeech.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TextToSpeech = ({\n  text\n}) => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n\n  // Cleanup on unmount or text change\n  useEffect(() => {\n    return () => {\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, [text]);\n\n  // const speakText = () => {\n  //   if (\"speechSynthesis\" in window) {\n  //     // Cancel any ongoing speech\n  //     window.speechSynthesis.cancel();\n\n  //     const speech = new SpeechSynthesisUtterance(text);\n  //     speech.lang = \"en-GB\";\n  //     speech.rate = 1;\n  //     speech.pitch = 1;\n  //     speech.volume = 1;\n\n  //     speech.onstart = () => {\n  //       setIsSpeaking(true);\n  //       setIsPaused(false);\n  //     };\n\n  //     speech.onend = () => {\n  //       setIsSpeaking(false);\n  //       setIsPaused(false);\n  //     };\n\n  //     speech.onerror = (event) => {\n  //       console.error(\"Speech error:\", event);\n  //       setIsSpeaking(false);\n  //       setIsPaused(false);\n  //     };\n\n  //     window.speechSynthesis.speak(speech);\n  //   } else {\n  //     console.error(\"Text-to-Speech is not supported in this browser.\");\n  //     alert(\"Text-to-Speech is not supported in your browser.\");\n  //   }\n  // };\n\n  const speakText = () => {\n    if (\"speechSynthesis\" in window) {\n      window.speechSynthesis.cancel(); // Stop any ongoing speech\n\n      const maxChunkLength = 200; // Split text into 200-character chunks\n      const textChunks = text.match(new RegExp(`.{1,${maxChunkLength}}`, \"g\")) || [];\n      let index = 0;\n      const speakNextChunk = () => {\n        if (index < textChunks.length) {\n          const speech = new SpeechSynthesisUtterance(textChunks[index]);\n          speech.lang = \"en-GB\";\n          speech.rate = 1;\n          speech.pitch = 1;\n          speech.volume = 1;\n          speech.onstart = () => {\n            setIsSpeaking(true);\n            setIsPaused(false);\n          };\n          speech.onend = () => {\n            index++;\n            if (index < textChunks.length) {\n              speakNextChunk(); // Speak the next chunk\n            } else {\n              setIsSpeaking(false);\n              setIsPaused(false);\n            }\n          };\n          speech.onerror = event => {\n            console.error(\"Speech error:\", event);\n            setIsSpeaking(false);\n            setIsPaused(false);\n          };\n          window.speechSynthesis.speak(speech);\n        }\n      };\n      speakNextChunk();\n    } else {\n      console.error(\"Text-to-Speech is not supported in this browser.\");\n      alert(\"Text-to-Speech is not supported in your browser.\");\n    }\n  };\n  const stopSpeaking = () => {\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n      setIsPaused(false);\n    }\n  };\n  const pauseSpeaking = () => {\n    if (window.speechSynthesis) {\n      window.speechSynthesis.pause();\n      setIsPaused(true);\n    }\n  };\n  const resumeSpeaking = () => {\n    if (window.speechSynthesis) {\n      window.speechSynthesis.resume();\n      setIsPaused(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-x-2\",\n    children: !isSpeaking ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: speakText,\n      className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400\",\n      disabled: !text,\n      children: \"Play Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseSpeaking,\n        className: \"bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600\",\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resumeSpeaking,\n        className: \"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\",\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopSpeaking,\n        className: \"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\",\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(TextToSpeech, \"UjptpMaJzPX8qAVhVSFBhgBiXrY=\");\n_c = TextToSpeech;\nexport default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","TextToSpeech","text","isSpeaking","setIsSpeaking","isPaused","setIsPaused","window","speechSynthesis","cancel","speakText","maxChunkLength","textChunks","match","RegExp","index","speakNextChunk","length","speech","SpeechSynthesisUtterance","lang","rate","pitch","volume","onstart","onend","onerror","event","console","error","speak","alert","stopSpeaking","pauseSpeaking","pause","resumeSpeaking","resume","className","children","onClick","disabled","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samruddhishinde/Desktop/barclays/research-paper-analyzer/client/src/components/TextToSpeech.tsx"],"sourcesContent":["\n\"use client\";\nimport { useState, useEffect } from \"react\";\n\n\n\nconst TextToSpeech = ({ text }) => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n\n  // Cleanup on unmount or text change\n  useEffect(() => {\n    return () => {\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, [text]);\n\n  // const speakText = () => {\n  //   if (\"speechSynthesis\" in window) {\n  //     // Cancel any ongoing speech\n  //     window.speechSynthesis.cancel();\n\n  //     const speech = new SpeechSynthesisUtterance(text);\n  //     speech.lang = \"en-GB\";\n  //     speech.rate = 1;\n  //     speech.pitch = 1;\n  //     speech.volume = 1;\n\n  //     speech.onstart = () => {\n  //       setIsSpeaking(true);\n  //       setIsPaused(false);\n  //     };\n\n  //     speech.onend = () => {\n  //       setIsSpeaking(false);\n  //       setIsPaused(false);\n  //     };\n\n  //     speech.onerror = (event) => {\n  //       console.error(\"Speech error:\", event);\n  //       setIsSpeaking(false);\n  //       setIsPaused(false);\n  //     };\n\n  //     window.speechSynthesis.speak(speech);\n  //   } else {\n  //     console.error(\"Text-to-Speech is not supported in this browser.\");\n  //     alert(\"Text-to-Speech is not supported in your browser.\");\n  //   }\n  // };\n\n  const speakText = () => {\n    if (\"speechSynthesis\" in window) {\n      window.speechSynthesis.cancel(); // Stop any ongoing speech\n  \n      const maxChunkLength = 200; // Split text into 200-character chunks\n      const textChunks = text.match(new RegExp(`.{1,${maxChunkLength}}`, \"g\")) || [];\n  \n      let index = 0;\n      const speakNextChunk = () => {\n        if (index < textChunks.length) {\n          const speech = new SpeechSynthesisUtterance(textChunks[index]);\n          speech.lang = \"en-GB\";\n          speech.rate = 1;\n          speech.pitch = 1;\n          speech.volume = 1;\n  \n          speech.onstart = () => {\n            setIsSpeaking(true);\n            setIsPaused(false);\n          };\n  \n          speech.onend = () => {\n            index++;\n            if (index < textChunks.length) {\n              speakNextChunk(); // Speak the next chunk\n            } else {\n              setIsSpeaking(false);\n              setIsPaused(false);\n            }\n          };\n  \n          speech.onerror = (event) => {\n            console.error(\"Speech error:\", event);\n            setIsSpeaking(false);\n            setIsPaused(false);\n          };\n  \n          window.speechSynthesis.speak(speech);\n        }\n      };\n  \n      speakNextChunk();\n    } else {\n      console.error(\"Text-to-Speech is not supported in this browser.\");\n      alert(\"Text-to-Speech is not supported in your browser.\");\n    }\n  };\n  \n\n  const stopSpeaking = () => {\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n      setIsPaused(false);\n    }\n  };\n\n  const pauseSpeaking = () => {\n    if (window.speechSynthesis) {\n      window.speechSynthesis.pause();\n      setIsPaused(true);\n    }\n  };\n\n  const resumeSpeaking = () => {\n    if (window.speechSynthesis) {\n      window.speechSynthesis.resume();\n      setIsPaused(false);\n    }\n  };\n\n  return (\n    <div className=\"space-x-2\">\n      {!isSpeaking ? (\n        <button\n          onClick={speakText}\n          className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400\"\n          disabled={!text}\n        >\n          Play Audio\n        </button>\n      ) : (\n        <>\n          {!isPaused ? (\n            <button\n              onClick={pauseSpeaking}\n              className=\"bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600\"\n            >\n              Pause\n            </button>\n          ) : (\n            <button\n              onClick={resumeSpeaking}\n              className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"\n            >\n              Resume\n            </button>\n          )}\n          <button\n            onClick={stopSpeaking}\n            className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\n          >\n            Stop\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TextToSpeech;"],"mappings":"AACA,YAAY;;AAAC,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;AACb,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAI5C,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAT,EAAA;EACjC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACAC,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIW,MAAM,CAACC,eAAe,EAAE;QAC1BD,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACP,IAAI,CAAC,CAAC;;EAEV;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMQ,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,iBAAiB,IAAIH,MAAM,EAAE;MAC/BA,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;;MAEjC,MAAME,cAAc,GAAG,GAAG,CAAC,CAAC;MAC5B,MAAMC,UAAU,GAAGV,IAAI,CAACW,KAAK,CAAC,IAAIC,MAAM,CAAC,OAAOH,cAAc,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE;MAE9E,IAAII,KAAK,GAAG,CAAC;MACb,MAAMC,cAAc,GAAGA,CAAA,KAAM;QAC3B,IAAID,KAAK,GAAGH,UAAU,CAACK,MAAM,EAAE;UAC7B,MAAMC,MAAM,GAAG,IAAIC,wBAAwB,CAACP,UAAU,CAACG,KAAK,CAAC,CAAC;UAC9DG,MAAM,CAACE,IAAI,GAAG,OAAO;UACrBF,MAAM,CAACG,IAAI,GAAG,CAAC;UACfH,MAAM,CAACI,KAAK,GAAG,CAAC;UAChBJ,MAAM,CAACK,MAAM,GAAG,CAAC;UAEjBL,MAAM,CAACM,OAAO,GAAG,MAAM;YACrBpB,aAAa,CAAC,IAAI,CAAC;YACnBE,WAAW,CAAC,KAAK,CAAC;UACpB,CAAC;UAEDY,MAAM,CAACO,KAAK,GAAG,MAAM;YACnBV,KAAK,EAAE;YACP,IAAIA,KAAK,GAAGH,UAAU,CAACK,MAAM,EAAE;cAC7BD,cAAc,CAAC,CAAC,CAAC,CAAC;YACpB,CAAC,MAAM;cACLZ,aAAa,CAAC,KAAK,CAAC;cACpBE,WAAW,CAAC,KAAK,CAAC;YACpB;UACF,CAAC;UAEDY,MAAM,CAACQ,OAAO,GAAIC,KAAK,IAAK;YAC1BC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,KAAK,CAAC;YACrCvB,aAAa,CAAC,KAAK,CAAC;YACpBE,WAAW,CAAC,KAAK,CAAC;UACpB,CAAC;UAEDC,MAAM,CAACC,eAAe,CAACsB,KAAK,CAACZ,MAAM,CAAC;QACtC;MACF,CAAC;MAEDF,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MACLY,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;MACjEE,KAAK,CAAC,kDAAkD,CAAC;IAC3D;EACF,CAAC;EAGD,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIzB,MAAM,CAACC,eAAe,EAAE;MAC1BD,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MAC/BL,aAAa,CAAC,KAAK,CAAC;MACpBE,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAM2B,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI1B,MAAM,CAACC,eAAe,EAAE;MAC1BD,MAAM,CAACC,eAAe,CAAC0B,KAAK,CAAC,CAAC;MAC9B5B,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;EAED,MAAM6B,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI5B,MAAM,CAACC,eAAe,EAAE;MAC1BD,MAAM,CAACC,eAAe,CAAC4B,MAAM,CAAC,CAAC;MAC/B9B,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,oBACER,OAAA;IAAKuC,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvB,CAACnC,UAAU,gBACVL,OAAA;MACEyC,OAAO,EAAE7B,SAAU;MACnB2B,SAAS,EAAC,iFAAiF;MAC3FG,QAAQ,EAAE,CAACtC,IAAK;MAAAoC,QAAA,EACjB;IAED;MAAAG,QAAA,EAAAjD,YAAA;MAAAkD,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAET7C,OAAA,CAAAE,SAAA;MAAAsC,QAAA,GACG,CAACjC,QAAQ,gBACRP,OAAA;QACEyC,OAAO,EAAEN,aAAc;QACvBI,SAAS,EAAC,gEAAgE;QAAAC,QAAA,EAC3E;MAED;QAAAG,QAAA,EAAAjD,YAAA;QAAAkD,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAET7C,OAAA;QACEyC,OAAO,EAAEJ,cAAe;QACxBE,SAAS,EAAC,8DAA8D;QAAAC,QAAA,EACzE;MAED;QAAAG,QAAA,EAAAjD,YAAA;QAAAkD,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,eACD7C,OAAA;QACEyC,OAAO,EAAEP,YAAa;QACtBK,SAAS,EAAC,0DAA0D;QAAAC,QAAA,EACrE;MAED;QAAAG,QAAA,EAAAjD,YAAA;QAAAkD,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACT;EACH;IAAAF,QAAA,EAAAjD,YAAA;IAAAkD,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClD,EAAA,CA3JIQ,YAAY;AAAA2C,EAAA,GAAZ3C,YAAY;AA6JlB,eAAeA,YAAY;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}